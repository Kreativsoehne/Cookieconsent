<!-- indexer::stop -->
<script>
    /* Retrieve current cconsent cookie data */
    let ccChoices = document.cookie.match(new RegExp('(^| )cconsent=([^;]+)'));
    if (Array.isArray(ccChoices) === true && ccChoices.length > 2) {
        try {
            ccChoices = JSON.parse(ccChoices.pop());
        } catch (e) {
            ccChoices = null;
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        /* Don't bother any further if cookies are allowed */
        try {
            if (ccChoices !== null
                && typeof ccChoices === 'object'
                && typeof ccChoices.categories.presentation === 'object'
                && ccChoices.categories.presentation.wanted === true) {
                return;
            }
        } catch (e) {}

        /* General Blocknotice template */
        const blockNoticeContent = '<?= addslashes($this->blocknotice) ?>';
        const template = document.createElement('div');
        template.innerHTML = blockNoticeContent.trim();
        template.firstElementChild.classList.add('cconsent-blocknotice-autosize');

        /* Replace iframes with blocknotice when presentation cookies are not allowed */
        const iFrames = document.querySelectorAll('iframe');

        iFrames.forEach(function(item) {
            item.setAttribute('data-src', item.src);
            item.src = '';

            const clonedNotice = template.firstElementChild.cloneNode(true);
            item.parentNode.insertBefore(clonedNotice, item.nextSibling);
            clonedNotice.appendChild(item);
        })
    });

    window.addEventListener("load", function() {
        /* Reload on any changes to the cookie consent settings */
        const ccButtons = document.querySelectorAll('#ccm__footer__consent-modal-submit,button.consent-give,button.consent-deny');
        for(let ccButton of ccButtons) {
            ccButton.addEventListener('click', function() {
                return window.location.reload();
            });
        }
    });

    window.CookieConsent.init({
    modalMainTextMoreLink: '<?= $this->imprint_link ?>',
    modalMainTextPrivacyLink: '<?= $this->privacy_link ?>',
    barTimeout: <?= $this->barTimeout ?>,

    language: {
        /* See template `cookieconsent_language.html5 for customization  */
        <?= $this->language ?>
    },

    categories: {
        /* See template `cookieconsent_categories.html5 for customization  */
        <?= $this->categories ?>
    },

    services: {
        /* See template `cookieconsent_services.html5 for customization  */
        <?= $this->services ?>
    }
    });
</script>
<!-- indexer::continue -->
